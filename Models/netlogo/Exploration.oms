
// Parameters
// density
val densityConf = Val[Int]

// network
val nwHeuristic = Val[Double]
val maxNewLinksNumber = Val[Double]

// gravity
val gravityRadius = Val[Double]
val gravityInflexion = Val[Double]
val gravityHierarchyWeight = Val[Double]
val gravityHierarchyExponent = Val[Double]

// breakdown
val breakdownHierarchy = Val[Double]
val breakdownThreshold = Val[Double]

//cost
val costTradeoff = Val[Double]

//biological
val bioThreshold = Val[Double]
val bioSteps = Val[Double]

// time params
val nwUpdateTime = Val[Double]

val id = Val[Int]
val replication = Val[Int]

// Reporters
// morphology
val moran=Val[Double]
val distance=Val[Double]
val entropy=Val[Double]
val slope=Val[Double]
val rsquared=Val[Double]
// network
val nwDiameter = Val[Double]
val meanPathLength = Val[Double]
val meanBwCentrality = Val[Double]
val meanClosenessCentrality = Val[Double]
val meanRelativeSpeed = Val[Double]
val nwLength = Val[Double]
val nwSize = Val[Double]



// model
// setup-experiment-network-growth [densityconf nw-heuristic new-links grav-radius grav-inflexion grav-hierarchy-weight grav-exponent brkdn-hierarchy brkdn-th cost-toff bio-threshold bio-steps nw-update-time rseed]
val cmds = List("setup-experiment-network-growth ${densityConf} ${nwHeuristic} ${maxNewLinksNumber}  ${gravityRadius} ${gravityInflexion} ${gravityHierarchyWeight} ${gravityHierarchyExponent} ${breakdownHierarchy} ${breakdownThreshold} ${costTradeoff} ${bioThreshold} ${bioSteps} ${nwUpdateTime} ${replication}","run-experiment")
val model = NetLogo6Task(workDirectory / "HEADLESS_MesoCoEvol.nlogo", cmds,embedWorkspace = true) set (
    inputs += (densityConf,nwHeuristic,maxNewLinksNumber,gravityRadius,gravityInflexion,gravityHierarchyWeight,gravityHierarchyExponent,breakdownHierarchy,breakdownThreshold,costTradeoff,bioThreshold,bioSteps,nwUpdateTime,replication,id),
    outputs += (densityConf,nwHeuristic,maxNewLinksNumber,gravityRadius,gravityInflexion,gravityHierarchyWeight,gravityHierarchyExponent,breakdownHierarchy,breakdownThreshold,costTradeoff,bioThreshold,bioSteps,nwUpdateTime,replication,id),
    outputs += moran mapped "indicators:morpho:moran",
    outputs += distance mapped "indicators:morpho:mean-distance",
    outputs += entropy mapped "indicators:morpho:entropy",
    outputs += slope mapped "indicators:morpho:slope",
    outputs += rsquared mapped "indicators:morpho:slope-rsquared",
    outputs += meanPathLength mapped "indicators:network:mean-path-length",
    outputs += nwDiameter mapped "indicators:network:diameter",
    outputs += meanBwCentrality mapped "indicators:network:mean-bw-centrality",
    outputs += meanClosenessCentrality mapped "indicators:network:mean-city-closeness-centrality",
    outputs += meanRelativeSpeed mapped "indicators:network:mean-relative-speed",
    outputs += nwLength mapped "indicators:network:length",
    outputs += nwSize mapped "indicators:network:size"
)

val purpose = "NETWORK_LHS_GRID"
//val purpose = "NETWORK_TEST"

// output hook
val indicshook = AppendToCSVFileHook(workDirectory / "exploration" / ((new java.text.SimpleDateFormat("yyyy_MM_dd_HH_mm_ss")).format(new java.util.Date()))+"_"+purpose+".csv")

// env
//val local = LocalEnvironment(10)
val grid = EGIEnvironment("vo.complex-systems.eu")


// exploration
val exploration = DirectSampling(
  evaluation = (model on grid by 50 hook indicshook),
  sampling = (LHS (
    1000,
    nwHeuristic in Range(0.0,5.9),
    gravityRadius in Range(10.0,5000.0),
    gravityInflexion in Range(0.1,10.0),
    gravityHierarchyWeight in Range(0.0,1.0),
    gravityHierarchyExponent in Range(0.1,4.0),
    maxNewLinksNumber in Range(4.0,20.0),
    breakdownHierarchy in Range(0.1,4.0),
    breakdownThreshold in Range(1.0,5.0),
    costTradeoff in Range(0.0,0.05),
    bioThreshold in Range(0.4,0.6),
    bioSteps in Range(40.0,100.0)
  ) withIndex id) x
   // (nwHeuristic is 0.5) x
   (nwUpdateTime is 1.0) x
   (densityConf in (1 to 50 by 1)) x
   //(densityConf is 1) x
   (replication in (UniformDistribution[Int]() take 5))
)


exploration
